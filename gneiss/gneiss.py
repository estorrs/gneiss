import argparse
import os
import subprocess

"""
usage: gneiss.py [options] fastq_1 fastq_2

args:
input_1 - sample fastq #1
input_2 - sample fastq #2

options:
--output-dir: str
    path to output directory
--threads: int
    how many processes to allow tophat and samtools to use
--genome-dir: str
    directory containing genome indixes generated by STAR genomeGenerate command
--compressed-input: bool
    whether input fastq files are gzipped or not. Default is False.
"""

parser = argparse.ArgumentParser()

parser.add_argument('fastq_1', type=str,
        help='read 1 fastq')
parser.add_argument('fastq_2', type=str,
        help='read 2 fastq')

output_group = parser.add_argument_group('output_group')
output_group.add_argument('--output-dir', type=str,
        help='Directory to store output in')

genome_dir_group = parser.add_argument_group('genome_dir_group')
genome_dir_group.add_argument('--genome-dir', type=str,
        help='Directory containing genome indixes generated by STAR genomeGenerate command')

parser.add_argument('--threads', type=int,
        default=1, help='how many processes to allow tophat and samtools to use')
parser.add_argument('--compressed-input',
        action="store_true", help='how many processes to allow tophat and samtools to use')

args = parser.parse_args()

def check_arguments():
    if args.output_dir is None:
        raise ValueError('Must specify --output-dir')

    if args.genome_dir is None:
        raise ValueError('Must specify a genome directory')

def run_star_aligner(read_1_fp, read_2_fp, genome_dir_fp, output_dir_fp, threads=1,
        compressed=False):
    # make sure genome_dir exists
    if not os.path.exists(output_dir_fp):
        os.makedirs(output_dir_fp)

    # add slash if not there
    if output_dir_fp[-1] != '/':
        output_dir_fp += '/'

    tool_args = ['STAR',
        '--runThreadN', str(threads),
        '--genomeDir', genome_dir_fp,
        '--outFileNamePrefix', output_dir_fp,
        '--outSAMtype', 'BAM', 'SortedByCoordinate']

    if compressed:
        tool_args += ['--readFilesCommand', 'zcat']

    tool_args += ['--readFilesIn', read_1_fp, read_2_fp]
    
    print(f'Running the following: {" ".join(tool_args)}')
    print(subprocess.check_output(tool_args).decode('utf-8'))

def main():
    check_arguments()
    
    run_star_aligner(args.fastq_1, args.fastq_2, args.genome_dir, args.output_dir,
            threads=args.threads, compressed=args.compressed_input)


if __name__ == '__main__':
    main()
